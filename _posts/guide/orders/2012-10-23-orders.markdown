---
layout: guides
title: Orders API
categories: 
- Listing
- Manage Listings
- Orders
- Manage Questions
menu:
- Orders
tags: 
- Orders
---

##Introduction

An Order is a request for a purchase of a certain Item or a group of Items, placed by a certain Customer. It is defined mainly by its quantity and price parameters, but could also include some other information in order to complete the description of what the customer is buying, often a certain variation on the item (eg: size and color of a pair of shoes).

This is what an Order looks like:

{% highlight javascript %}
{
  "id": 731867397,
  "status": "paid",
  "status_detail": null,
  "date_created": "2011-10-19T18:40:34.425Z",
  "date_closed": "2011-10-19T18:40:34.425Z",
  "order_items": [...],
  "total_amount": 20,
  "currency_id": ARS,
  "buyer": {...},
  "seller": {...},
  "payments":{...},
  "feedback":{...},
  "shipping":{...},
  "tags": [
  ],
}
{% endhighlight %}


Using Orders API you can build your own Sales Management System. 

There are two general scenarios where you can use Orders API:

- The first one is when we have several stores and we want to manage these stores using only one channel or app. In this page we will see how the user is notified when he sell something and three most common operations: check and update stock, track an order and give feedback. 

- The second way is using Orders API as a backend directly.  


##Resources 

Here are presented the resources available for Orders API. An order represents a purchase in MercadoLibre. Each purchase is associated with an item entity and it could have three more associations, payments, shipment and feedback. These associations could not exist. 

Main URI for Orders resource: 

<pre><code>https://api.mercadolibre.com/orders</code></pre>

Other URIs: 

<pre><code>https://api.mercadolibre.com/payments</code></pre>

<pre><code>https://api.mercadolibre.com/feedback</code></pre>


Checkout others available resources in [API Directory](/API-directory/) under Order Management.

##Scenario 1: Building a Sales Management System

##How to be aware of a purchase?

First of all, we have to configure our application to be capable of getting notifications. This can be done by subscribing your application to orders notifications. Go to [http://applications.mercadolibre.com](http://applications.mercadolibre.com) then edit your application and set up the Notifications Settings. 

![App create](/images/notificaciones.png)

You must choose a Callback URL, configure the public URL of your domain where you want to receive all the notifications from MercadoLibre. E.g.: “http://backend.soleorigami.com/notif”.
Also you need to specify which ‘topic’ you will listen, in this case you must select orders. 

This configuration allows you to interact with MercadoLibre notifications. All the events (like payments and shipping) related with an order will be notified to your callback URL. 

If you have any doubt about how to create an application go [here](/application-manager/).   

##Receiving a Notification

MercadoLibre will send us notifications throw a POST message with information inside it’s body. The most important attribute in the message is the user_id which is related to the notification and second one is the resource. The resource is the element that has been updated or it just has been created.

###POST order notification {#post-order}
{% highlight javascript %}
{
  "user_id": 1234,
  "resource": "/orders/731867397",
  "topic": "orders",
  "received": "2011-10-19T16:38:34.425Z",
  "application_id" : 14529
  "sent" : "2011-10-19T16:40:34.425Z",
  "attempts" : 0
}
{% endhighlight %}

After receiving the notification we must send an acknowledgment (ACK 200) to MercadoLibre in order to stop receiving the notification. 

See more about [Notifications](/notifications/).


##Getting the Order

To get the info of the new order or the updated order we can make a GET message using the resource given in the previous notification. 

<pre class="terminal">
curl https://api.mercadolibre.com/orders/731867397?access_token=...
</pre>

The response of the GET message would be like this: 
 
###GET order {#get-order}
{% highlight javascript %}
{
  "id": 731867397,
  "status": "paid",
  "status_detail": null,
  "date_created": "2011-10-19T18:40:34.425Z",
  "date_closed": "2011-10-19T18:40:34.425Z",
  "order_items": [...],
  "total_amount": 20,
  "currency_id": ARS,
  "buyer": {...},
  "seller": {...},
  "payments":{...},
  "feedback":{...},
  "shipping":{...},
  "tags": [
  ],
}
{% endhighlight %}


##Updating the stock available

When we receive an order of a purchase we can get how many units were sold. 

In this particular scenario, we want to maintain our stock updated in both MercadoLibre account and in our application.  

From MercadoLibre: when we obtain the order by doing a GET request, we will get the quantity of the items sold. With this info we can update our database.  
From our application: when we sell items from our site, we must update the quantity of items available in MercadoLibre. Doing this is really simply, we just do an update of the item by a PUT request with the new quantity available. 

<pre class="terminal">curl -X PUT 'https://api.mercadolibre.com/items/731867397?' -d {"available_quantity"=2}</pre>

##Tracking the order

When we receive a purchase and we send the item by mail, generally the post office give us a tracking number. MercadoLibre allow us to add information about the shipping. 

This is an optional step. 

Using again a PUT request we can modify the order by adding the tracking number of the shipping. 

###PUT /shipments/123456 {#put-shipment}
{% highlight javascript %}
{
	"tracking_number":"sfd23436df1284"
}
{% endhighlight %}

Shortly will be more information about shipping.

##Giving feedback

Another thing that we can do is give feedback.

Using a POST request we can create a new feedback related to the order. Three attributes are required to complete this task. Fulfilled attribute means if the transaction was made with two possible values: true, false. Rating if it was positive, negative or neutral. And finally a message to the buyer.  

###Give feedback {#give-feedback}
{% highlight javascript %}
POST /orders/1234/feedback
{
  "rating": "positive",
  "fulfilled": true,
  "message": "Everything was fine :)"
}
{% endhighlight %}


<pre class="terminal">curl -X POST 'https://api.mercadolibre.com/orders/1234/feedback?access_token=' 
-d '{"rating":"positive","fulfilled":true,"message":"Everything was fine :)"}'  </pre>

You can read more about giving feedback [here](/giving-feedback-of-an-order).

##Scenario 2: Orders API as a Backend

Another possible scenario is to use MercadoLibre API directly. This scenario is when we need a view of the purchases made in MercadoLibre. The big difference with first scenario is that instead of receiving notifications we will use the search resource in orders to obtain the purchases of the seller.  There are also available queries and filters to apply in the search. 

This is private resource so we will need the access tokens in order to exchange information. 

<pre class="terminal">GET /orders/search?seller=... </pre>

One possible application for this is when we have mobile apps and we don’t want to store the orders information in the mobile device. 
